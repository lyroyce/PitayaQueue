#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from pitaya import Pitaya
from pitaya.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  Job queue(string payload)'
  print '  Message query(i32 job_id)'
  print '  Job take(i32 timeout)'
  print '  void done(i32 job_id, string result)'
  print '  void shutdown()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Pitaya.Client(protocol)
transport.open()

if cmd == 'queue':
  if len(args) != 1:
    print 'queue requires 1 args'
    sys.exit(1)
  pp.pprint(client.queue(args[0],))

elif cmd == 'query':
  if len(args) != 1:
    print 'query requires 1 args'
    sys.exit(1)
  pp.pprint(client.query(eval(args[0]),))

elif cmd == 'take':
  if len(args) != 1:
    print 'take requires 1 args'
    sys.exit(1)
  pp.pprint(client.take(eval(args[0]),))

elif cmd == 'done':
  if len(args) != 2:
    print 'done requires 2 args'
    sys.exit(1)
  pp.pprint(client.done(eval(args[0]),args[1],))

elif cmd == 'shutdown':
  if len(args) != 0:
    print 'shutdown requires 0 args'
    sys.exit(1)
  pp.pprint(client.shutdown())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
